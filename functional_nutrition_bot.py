
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Render

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–∏—Ç–∞–Ω–∏—è"),
    KeyboardButton("üç≤ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"),
    KeyboardButton("üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"),
)
main_menu.add(
    KeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
    KeyboardButton("üì§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º")
)

@dp.message_handler(commands=['start', 'menu'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ *–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è*!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        parse_mode="Markdown",
        reply_markup=main_menu
    )

@dp.message_handler(lambda message: message.text == "üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–∏—Ç–∞–Ω–∏—è")
async def program_handler(message: types.Message):
    text = (
        "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "- 3‚Äì6 –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å\n"
        "- –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—É—Å–æ–≤\n"
        "- –í–≤–µ–¥–µ–Ω–∏–µ –æ–≤–æ—â–µ–π –ø–æ 0.5 —á.–ª. –≤ –ø—Ä–∏–≤—ã—á–Ω—ã–µ –±–ª—é–¥–∞\n"
        "- –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞, –≥–ª—é—Ç–µ–Ω–∞ –∏ –º–æ–ª–æ–∫–∞\n"
        "- –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –≤–æ–¥–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
    )
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "üç≤ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã")
async def allowed_products_handler(message: types.Message):
    text = (
        "–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        "- –ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞\n"
        "- –û–≤–æ—â–∏ (–∫—Ä–æ–º–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è)\n"
        "- –ì—Ä–µ—á–∫–∞, –ø—à–µ–Ω–æ, –æ–≤—ë—Å\n"
        "- –Ø–≥–æ–¥—ã, —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ\n"
        "- –ë—É–ª—å–æ–Ω—ã, —Å—É–ø—ã\n"
        "- –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Å–ª–∞"
    )
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã")
async def forbidden_products_handler(message: types.Message):
    text = (
        "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        "- –°–∞—Ö–∞—Ä, —Å–ª–∞–¥–æ—Å—Ç–∏, –≤—ã–ø–µ—á–∫–∞\n"
        "- –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "- –§–∞—Å—Ç—Ñ—É–¥, —á–∏–ø—Å—ã\n"
        "- –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å, —Ä–∏—Å, –ø—à–µ–Ω–∏—Ü–∞\n"
        "- –°—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã, –∞—Ä–∞—Ö–∏—Å, –∫–µ—à—å—é"
    )
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq_handler(message: types.Message):
    text = (
        "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "‚Äî –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ –Ω–µ –µ—Å—Ç?\n"
        "–û—Ç–≤–µ—Ç: –Ω–µ –Ω–∞—Å—Ç–∞–∏–≤–∞—Ç—å, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–¥—É –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—É–ª–∫–∏.\n\n"
        "‚Äî –ö–∞–∫ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã?\n"
        "–û—Ç–≤–µ—Ç: –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –Ω–∞—á–∏–Ω–∞—è —Å 0.5 —á–∞–π–Ω–æ–π –ª–æ–∂–∫–∏."
    )
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "üì§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º")
async def contact_handler(message: types.Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º: @–≤–∞—à_–Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
